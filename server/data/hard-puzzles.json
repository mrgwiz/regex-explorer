[
  {
    "difficulty": "hard",
    "instructions": "Match all valid IPv4 addresses in the text.",
    "text": "Server IP addresses: 192.168.1.1, 10.0.0.1, and 172.16.254.1. Invalid IPs: 256.0.0.1, 192.168.1, 192.168.1.y",
    "solution": "\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b",
    "hint": "Each octet must be a number between 0-255, separated by dots, with 4 octets total.",
    "order": 1
  },
  {
    "difficulty": "hard",
    "instructions": "Match all words that are palindromes (read the same forward and backward) in the text.",
    "text": "Mom and Dad took their racecar to the civic center. Wow! They saw a radar system and a level playing field. Do geese see God?",
    "solution": "\\b(\\w)(\\w)(\\w)?\\2\\1\\b|\\b(\\w)(\\w)(\\w)(\\w)?\\3\\2\\1\\b|\\b(\\w)(\\w)(\\w)(\\w)(\\w)?\\4\\3\\2\\1\\b|\\b\\w\\b",
    "hint": "Break this down by palindrome length. Single-letter words are palindromes, and for others, capture letters from the outside in, then refer back to them in reverse order.",
    "order": 2
  },
  {
    "difficulty": "hard",
    "instructions": "Match all strings that have balanced parentheses with content inside.",
    "text": "Examples: (balanced), (also balanced), ((nested balanced)), (unbalanced, )(separate), ()",
    "solution": "\\([^()]*(?:\\([^()]*\\)[^()]*)*\\)",
    "hint": "This is a complex pattern. Start by matching simple parentheses, then build up to nested ones.",
    "order": 3
  },
  {
    "difficulty": "hard",
    "instructions": "Match all words that contain all the vowels (a, e, i, o, u) in any order.",
    "text": "The adventitious facetious abstemious person epizootic sequoia required adequate education.",
    "solution": "\\b(?=\\w*a)(?=\\w*e)(?=\\w*i)(?=\\w*o)(?=\\w*u)\\w+\\b",
    "hint": "Use positive lookaheads to ensure a word contains each vowel, without specifying their order.",
    "order": 4
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid dates in ISO format (YYYY-MM-DD) where the date could actually exist.",
    "text": "Meeting dates: 2023-01-15, 2022-12-31, 2024-02-29, 2023-04-31, 2023-13-01, 2023-00-00",
    "solution": "\\b(?:19|20)\\d{2}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12]\\d|3[01])\\b",
    "hint": "Match years, then months 01-12, then days 01-31. Full validation would need more complex logic for month length.",
    "order": 5
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid email addresses that use Gmail, Yahoo, or Outlook domains.",
    "text": "Contact us at john.doe@gmail.com, jane_smith@yahoo.com, or support@outlook.com. Don't use invalid@gmailcom, user@yahoo, or @outlook.com.",
    "solution": "[a-zA-Z0-9._%+-]+@(?:gmail|yahoo|outlook)\\.com\\b",
    "hint": "Match the username part, then @ symbol, then specifically gmail.com, yahoo.com, or outlook.com domains.",
    "order": 6
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid credit card numbers (16 digits, optionally separated in groups of 4 by spaces or hyphens).",
    "text": "Payment methods: 4111 1111 1111 1111, 5555-5555-5555-4444, 378282246310005, 41111111-1111-1111.",
    "solution": "\\b(?:\\d{4}[- ]?){3}\\d{4}\\b|\\b\\d{16}\\b",
    "hint": "Match either 16 consecutive digits, or 4 groups of 4 digits separated by an optional space or hyphen.",
    "order": 7
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid HTML image tags with src attribute (like <img src=\"image.jpg\">).",
    "text": "<img src=\"logo.png\"> <img alt=\"Photo\" src='profile.jpg'> <image source=\"icon.svg\"> <img alt=\"Invalid\">",
    "solution": "<img\\s+[^>]*?src=['\"][^'\"]+['\"][^>]*>",
    "hint": "Match img tag opening, any attributes, the src attribute with a value in quotes, and the closing bracket.",
    "order": 8
  },
  {
    "difficulty": "hard",
    "instructions": "Match all URLs containing query parameters (e.g., ?param=value).",
    "text": "Visit https://example.com/search?q=regex&page=1, http://api.site.com?key=123, https://domain.org/path, and https://test.co/path?",
    "solution": "https?://[\\w.-]+(?:/[\\w.-]+)*\\?(?:[\\w%]+=?[\\w%]*(?:&[\\w%]+=?[\\w%]*)*)",
    "hint": "Match the protocol, domain, path, then a question mark followed by one or more parameter=value pairs.",
    "order": 9
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid passwords according to these rules: at least 8 characters, at least one uppercase letter, one lowercase letter, one number, and one special character (!@#$%^&*).",
    "text": "Password examples: StrongPwd1!, Weak123, NoSpecial1A, short!, ALL_UPPERCASE_123!, @ValidPass2023",
    "solution": "(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{8,}",
    "hint": "Use lookaheads to enforce each rule (uppercase, lowercase, digit, special char), then match 8+ valid characters.",
    "order": 10
  },
  {
    "difficulty": "hard",
    "instructions": "Match all strings that have exactly balanced opening and closing square brackets with content inside.",
    "text": "Examples: [balanced], [also [nested] balanced], [[empty content]], [unbalanced, ][separate]",
    "solution": "\\[[^\\[\\]]*(?:\\[[^\\[\\]]*\\][^\\[\\]]*)*\\]",
    "hint": "Similar to the balanced parentheses problem, but with square brackets.",
    "order": 11
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid ISBN-10 numbers (10 digits or 9 digits followed by 'X', with optional hyphens between groups).",
    "text": "Books: ISBN 0-306-40615-2, 0306406152, 1-234-56789-X, 123456789X, 0-9752298-0-X, 0975229-80X, a9912342!4X",
    "solution": "\\b(?:\\d[- ]?){9}[\\dX]\\b",
    "hint": "Match 9 digits with optional separators, followed by a digit or X.",
    "order": 12
  },
  {
    "difficulty": "hard",
    "instructions": "Match all words that contain exactly the same letters as 'note' in any order.",
    "text": "The tone of the conversation was noted by everyone. They took note of what was said next. One might say it was neat.",
    "solution": "\\b(?=\\w*n)(?=\\w*o)(?=\\w*t)(?=\\w*e)(?!\\w*[^note])\\w{4}\\b",
    "hint": "Use positive lookaheads to check for each required letter, a negative lookahead to ensure no other letters are present, and match exactly 4 characters.",
    "order": 13
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid US phone numbers with area codes, but only if they have a valid area code (not 000, 911, etc.).",
    "text": "Call us at (555) 123-4567 or 888-555-1234. Don't call (000) 123-4567, (911) 123-4567, or (555) 000-0000.",
    "solution": "(?:\\((?!000|911)\\d{3}\\)|(?!000|911)\\d{3})[-. ]\\d{3}[-. ](?!0000)\\d{4}",
    "hint": "Use negative lookaheads to exclude invalid area codes and central office codes.",
    "order": 14
  },
  {
    "difficulty": "hard",
    "instructions": "Match strings that contain exactly balanced pairs of angle brackets (< and >) with potential nesting.",
    "text": "Examples: <balanced>, <also <nested> balanced>, <<empty>>, <unbalanced, ><separate>, not<>balanced",
    "solution": "\\b[^<>]*(?:<[^<>]*(?:<[^<>]*>[^<>]*)*>[^<>]*)*\\b",
    "hint": "Start by matching simple brackets, then build to handle nesting. Pay attention to word boundaries.",
    "order": 15
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid base64 encoded strings (consisting of alphanumeric characters, '+', '/', and ending with 0-2 '=' characters).",
    "text": "Encoded data: SGVsbG8gV29ybGQ=, Q29tcHV0ZXI=, Invalid=Base64, Valid/+Base64String, bm90dmFsaWQh@, dGhpcyBpcyB2YWxpZA==",
    "solution": "\\b[A-Za-z0-9+\\/]+={0,2}\\b",
    "hint": "Match one or more valid base64 characters, followed by 0-2 equals signs for padding.",
    "order": 16
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid hexadecimal numbers with an optional 0x prefix (like 0x1A or 1A5F).",
    "text": "Values: 0x1A3F, 0x0, FF00, 0x123ABC, 0xG123, 1234ZZ, 0x, 0x123!",
    "solution": "\\b(?:0x)?[0-9A-Fa-f]+\\b(?![0-9A-Za-z])",
    "hint": "Match an optional 0x prefix, followed by one or more hex digits, with a word boundary after.",
    "order": 17
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid RGB color values in the format rgb(0-255, 0-255, 0-255).",
    "text": "Colors: rgb(255, 0, 0), rgb(0,255,0), rgb(0, 0, 255), rgb(300, 0, 0), rgb(255, 300, 0), rgb(255)",
    "solution": "rgb\\(\\s*(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)\\s*,\\s*(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)\\s*,\\s*(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)\\s*\\)",
    "hint": "Match 'rgb(' followed by three numbers between 0-255 separated by commas, with optional whitespace.",
    "order": 18
  },
  {
    "difficulty": "hard",
    "instructions": "Match numbers that follow a valid version number pattern (like 1.0.0, 2.3.5, or 10.2.1).",
    "text": "Software versions: 1.0.0, 2.3.5, 10.2.1, 0.1.2, 1.0, 1.2.3.4, 01.2.3, 1.02.3, v1.2.3",
    "solution": "\\b[1-9]\\d*\\.(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)\\b",
    "hint": "Match digits for major version (must not start with 0 unless it is 0), followed by period, minor version, period, and patch version.",
    "order": 19
  },
  {
    "difficulty": "hard",
    "instructions": "Match all valid URL paths with query parameters and fragments (e.g., /path?query=value#fragment).",
    "text": "URLs: /home, /products/123, /search?q=test, /user?id=456#profile, /invalid?=empty, /bad#",
    "solution": "/(?:[\\w-]+/?)+(?:\\?[\\w-]+=\\w+(?:&[\\w-]+=\\w+)*)?(?:#[\\w-]+)?\\b",
    "hint": "Match the path segments, optional query parameters with key-value pairs, and optional fragment identifier.",
    "order": 20
  }
]